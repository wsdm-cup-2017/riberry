package wsdm;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;

import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;
import ml.dmlc.xgboost4j.java.XGBoostError;
//import ml.dmlc.xgboost4j.java.example.util.DataLoader;


public class Classifier {
	public static String BASEDIR_DATA = "/home/yiran/wsdm/featuretrain/";
//	public static String BASEDIR_DATA = "../featuretrain/";

	public static float checkPredicts(float[][] fPredicts, float[][] sPredicts) {
		//System.out.println(fPredicts.length); // # rows
		if (fPredicts.length != sPredicts.length) {
			return -1;
		}
		int total = 0, right = 0;
		for (int i = 0; i < fPredicts.length; i++) {
			total++;
			//System.out.println(fPredicts[i].length);break; // =1.
			if (Arrays.equals(fPredicts[i], sPredicts[i])) {
				right++;
			}
		}
		return ((float) right)/total;
	}
	public static float getAccuracy(float[] truth, float[][] sPredicts) {
		if (truth.length != sPredicts.length) {
			return -1;
		}
		int total = 0, right = 0;
		for (int i = 0; i < truth.length; i++) {
			total++;
			if (truth[i]<=0.5 && sPredicts[i][0]<=0.5) {
				right++;
			}
			if (truth[i]>0.5 && sPredicts[i][0]>0.5) {
				right++;
			}
		}
		return ((float) right)/total;
	}

	public static void trainClassifier() throws Exception {
		// load file from text file, also binary buffer generated by xgboost4j
		DMatrix trainMat = new DMatrix(BASEDIR_DATA+"ExtactedFeatures_2012_10_svm.txt");
		DMatrix testMat = new DMatrix(BASEDIR_DATA+"ExtactedFeatures_2012_11_svm.txt");

		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("eta", 1.0);
		params.put("max_depth", 2);
		params.put("silent", 1);
		params.put("objective", "binary:logistic");

		HashMap<String, DMatrix> watches = new HashMap<String, DMatrix>();
		watches.put("train", trainMat);
		watches.put("test", testMat);

		// set round
		int round = 2;

		// train a boost model
		Booster booster = XGBoost.train(trainMat, params, round, watches, null, null);

		// ground truth of test data
		float[] truth = testMat.getLabel();

		// save model to modelPath
		File file = new File("./model");
		if (!file.exists()) {
			file.mkdirs();
		}

		String modelPath = "./model/xgb.model";
		booster.saveModel(modelPath);

		// save dmatrix into binary buffer
		//testMat.saveBinary("./model/dtest.buffer");

		// reload model and data
		Booster booster2 = XGBoost.loadModel("./model/xgb.model");
		//DMatrix testMat2 = new DMatrix("./model/dtest.buffer");
		
		float[][] predicts2 = booster2.predict(testMat);

		// check the two predicts
		System.out.println(getAccuracy(truth, predicts2));

		
	}

	public static void main(String[] args) throws Exception {
		trainClassifier();
	}
}
