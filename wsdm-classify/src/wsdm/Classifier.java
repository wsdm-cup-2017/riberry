package wsdm;

import java.awt.print.Printable;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.lang.management.ThreadInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;
import ml.dmlc.xgboost4j.java.XGBoostError;
//import ml.dmlc.xgboost4j.java.example.util.DataLoader;


public class Classifier {
	public static final float MISSING = -100.0f;
	public static int NUMCOL = 119; // num of features, not include label

	public static String BASEDIR_DATA = "/home/yiran/wsdm/featuretrain/";
//	public static String BASEDIR_DATA = "../featuretrain/";
	
	public static void readfloat(String filename, float[] data, float[] label){
		Scanner scan;
	    File file = new File(filename);
        int i=0, pos=0, lpos=0;
	    try {
	        scan = new Scanner(file);
	        while(scan.hasNextFloat())
	        {
	        	if (pos>=data.length || lpos>label.length) {
	        		System.out.print("overflow "+scan.nextFloat());
	        		System.out.print(" "+scan.nextFloat());
	        		System.out.print(" "+scan.nextFloat());
	        		System.out.print(" "+scan.nextFloat());
	        		System.out.print(" "+scan.nextFloat());
	        		System.out.print(" "+scan.nextFloat());
	        		System.out.print(" "+scan.nextFloat());
	        		break;
				}
	        	i=(i+1)%(1+NUMCOL);
	        	if (i==1) {
	        		label[lpos]=scan.nextFloat();
	        		lpos++;
					continue;
				}
	            data[pos]=scan.nextFloat(); pos++;
	        }
	    } catch (Exception e1) {
	            e1.printStackTrace();
	    }
	    System.out.println("   stat: dp="+pos+", lp="+lpos);
	}
	
	public static int[] getshape(String filename){
		int rc[] = new int[2];
		int lines=0, col=0;
		try {
			BufferedReader reader = new BufferedReader(new FileReader(filename));
			String line;
			while ((line = reader.readLine()) != null) {
				if (!"".equals(line.trim())) {
					lines++;
					if (col==0) {
						col=line.split(" ").length;
					}
				}
			}
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		rc[0]=lines;
		rc[1]=col;
		return rc;
	}
	
	public static int countrows(String filename){
		int lines = 0;
		try {
			BufferedReader reader = new BufferedReader(new FileReader(filename));
			String line;
			while ((line = reader.readLine()) != null) {
				if (!"".equals(line.trim())) {
					lines++;
				}
			}
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return lines;
	}

	public static float checkPredicts(float[][] fPredicts, float[][] sPredicts) {
		//System.out.println(fPredicts.length); // # rows
		if (fPredicts.length != sPredicts.length) {
			return -1;
		}
		int total = 0, right = 0;
		for (int i = 0; i < fPredicts.length; i++) {
			total++;
			//System.out.println(fPredicts[i].length);break; // =1.
			if (Arrays.equals(fPredicts[i], sPredicts[i])) {
				right++;
			}
		}
		return ((float) right)/total;
	}
	public static float getAccuracy(float[] truth, float[][] sPredicts) {
		if (truth.length != sPredicts.length) {
			return -1;
		}
		int total = 0, right = 0;
		for (int i = 0; i < truth.length; i++) {
			total++;
			if (truth[i]<=0.5 && sPredicts[i][0]<=0.5) {
				right++;
			}
			if (truth[i]>0.5 && sPredicts[i][0]>0.5) {
				right++;
			}
		}
		return ((float) right)/total;
	}

	public static void trainClassifier() throws Exception {
		// load file from text file, also binary buffer generated by xgboost4j
//		DMatrix trainMat = new DMatrix(BASEDIR_DATA+"ExtactedFeatures_2012_11_svm.txt");
//		DMatrix testMat = new DMatrix(BASEDIR_DATA+"ExtactedFeatures_2012_10_svm.txt");
		String trainfile = BASEDIR_DATA+"ExtactedFeatures_2012_11_array.txt";
		int trainsp[] = getshape(trainfile); // 427168
		int trainrow=trainsp[0];
		NUMCOL=trainsp[1]  -1   ;  // not label -1
		String testfile = BASEDIR_DATA+"ExtactedFeatures_2012_10_array.txt";
		int testsp[] = getshape(testfile); // 264594
		int testrow = testsp[0];
		System.out.println("stat: trainrow="+trainrow+", testrow="+testrow+", col="+NUMCOL);
		
		float[] traindata=new float[trainrow*NUMCOL];
		float[] trainlabel=new float[trainrow];
		
		float[] testdata=new float[testrow*NUMCOL];
		float[] testlabel=new float[testrow];
		
		readfloat(trainfile,traindata,trainlabel);
		readfloat(testfile, testdata, testlabel);
		
		for(int i=0;i<traindata.length;i++){
			if(i<NUMCOL){
				System.out.print(traindata[i]+" ");
			}
		}
		System.out.println();
		for(int i=0;i<trainlabel.length;i++){
			if(i<2){
				System.out.print(trainlabel[i]+",");
			}
		}
		System.out.println();
		
		DMatrix trainMat = new DMatrix(traindata, trainrow, NUMCOL, MISSING);
		trainMat.setLabel(trainlabel);
		DMatrix testMat = new DMatrix(testdata, testrow, NUMCOL, MISSING);
		testMat.setLabel(testlabel);

		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("eta", 0.3);
		params.put("max_depth", 3);
		params.put("silent", 1);
		params.put("objective", "binary:logistic");

		HashMap<String, DMatrix> watches = new HashMap<String, DMatrix>();
		watches.put("train", trainMat);
		watches.put("test", testMat);

		// set round
		int round = 2;

		// train a boost model
		Booster booster = XGBoost.train(trainMat, params, round, watches, null, null);

		// ground truth of test data
		float[] truth = testMat.getLabel();

		// save model to modelPath
		File file = new File("./model");
		if (!file.exists()) {
			file.mkdirs();
		}

		String modelPath = "./model/xgb.model";
		booster.saveModel(modelPath);

		// save dmatrix into binary buffer
		//testMat.saveBinary("./model/dtest.buffer");

		// reload model and data
		Booster booster2 = XGBoost.loadModel("./model/xgb.model");
		//DMatrix testMat2 = new DMatrix("./model/dtest.buffer");
		
		float[][] predicts2 = booster2.predict(testMat);

		// check the two predicts
		System.out.println("Accuracy: "+getAccuracy(truth, predicts2));

		
	}

	public static void main(String[] args) throws Exception {
		trainClassifier();
	}
}
